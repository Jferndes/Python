# Guide d'Installation Rapide

## 📥 Étape 1 : Récupérer le code

Tous les fichiers ont été générés dans les artifacts Claude. Téléchargez-les et organisez-les selon cette structure :

```
votre-projet/
├── main.py
├── requirements.txt
├── README.md
├── .gitignore
├── setup_structure.py
├── sport_raw.csv          ← Vos données
├── travail_raw.csv        ← Vos données
│
├── config/
│   ├── __init__.py
│   └── constantes.py
│
├── donnees/
│   ├── __init__.py
│   ├── chargementDonnees.py
│   └── nettoyageDonnees.py
│
├── analyse/
│   ├── __init__.py
│   ├── regressionLineaire.py
│   ├── statistiques.py
│   └── correlations.py
│
├── visualisation/
│   ├── __init__.py
│   ├── graphiquesRegression.py
│   ├── graphiquesResidus.py
│   └── utilitairesGraphiques.py
│
└── resultats/
    ├── __init__.py
    └── interpretations.py
```

## 🔧 Étape 2 : Créer la structure automatiquement

Si vous avez tous les fichiers Python mais pas les dossiers :

```bash
python setup_structure.py
```

Puis copiez les fichiers Python dans leurs dossiers respectifs.

## 📦 Étape 3 : Installer les dépendances

### Option A : Avec pip

```bash
pip install pandas numpy scipy matplotlib
```

### Option B : Avec requirements.txt

```bash
pip install -r requirements.txt
```

### Option C : Avec un environnement virtuel (recommandé)

```bash
# Créer l'environnement virtuel
python -m venv venv

# Activer l'environnement
# Sur Windows :
venv\Scripts\activate
# Sur Mac/Linux :
source venv/bin/activate

# Installer les dépendances
pip install -r requirements.txt
```

## 📊 Étape 4 : Préparer vos données

Placez vos fichiers CSV à la racine :
- `sport_raw.csv`
- `travail_raw.csv`

Vérifiez qu'ils ont les bonnes colonnes :

**sport_raw.csv :**
```csv
individu_id,date,activite,duree,unite,poids_kg,calories
```

**travail_raw.csv :**
```csv
individu_id,date,tasses_cafe,heures_travail,productivite
```

## ▶️ Étape 5 : Lancer l'application

```bash
python main.py
```

## 📈 Étape 6 : Consulter les résultats

Les résultats seront dans le dossier `resultats/` :
- Fichiers PNG : Tous les graphiques
- `rapport_analyse.txt` : Rapport complet

## 🐛 Dépannage

### Erreur : Module not found

```bash
# Vérifier que vous êtes dans le bon dossier
pwd  # ou cd sur Windows

# Vérifier les dépendances
pip list

# Réinstaller si nécessaire
pip install --upgrade pandas numpy scipy matplotlib
```

### Erreur : Can't find CSV files

Vérifiez que vos fichiers CSV sont bien à la racine du projet (même niveau que `main.py`).

### Erreur : seaborn style not found

Si vous avez une erreur avec le style seaborn, modifiez `visualisation/utilitairesGraphiques.py` :

```python
# Remplacer cette ligne :
plt.style.use('seaborn-v0_8-darkgrid')

# Par :
plt.style.use('default')
```

## ✅ Vérification de l'installation

Pour vérifier que tout fonctionne :

```bash
python -c "import pandas, numpy, scipy, matplotlib; print('✓ Toutes les librairies sont installées')"
```

## 🎯 Test rapide

Créez un fichier `test_import.py` :

```python
#!/usr/bin/env python
# -*- coding: utf-8 -*-

print("Test des imports...")
try:
    from donnees.chargementDonnees import chargerDonneesSport
    print("✓ Module donnees OK")
    
    from analyse.regressionLineaire import regressionLineaireSimple
    print("✓ Module analyse OK")
    
    from visualisation.utilitairesGraphiques import configurerStyle
    print("✓ Module visualisation OK")
    
    from resultats.interpretations import genererRapportComplet
    print("✓ Module resultats OK")
    
    from config.constantes import METS
    print("✓ Module config OK")
    
    print("\n✓✓✓ Tous les modules sont correctement importés !")
    
except ImportError as e:
    print(f"\n✗ Erreur d'import : {e}")
    print("Vérifiez la structure des dossiers et les fichiers __init__.py")
```

Exécutez :
```bash
python test_import.py
```

## 📚 Ordre de création des fichiers

Si vous créez manuellement :

1. **Créer les dossiers** (avec `setup_structure.py`)
2. **Config** : `config/constantes.py`
3. **Données** : `donnees/chargementDonnees.py`, `donnees/nettoyageDonnees.py`
4. **Analyse** : `analyse/regressionLineaire.py`, `analyse/statistiques.py`, `analyse/correlations.py`
5. **Visualisation** : `visualisation/utilitairesGraphiques.py`, `visualisation/graphiquesRegression.py`, `visualisation/graphiquesResidus.py`
6. **Résultats** : `resultats/interpretations.py`
7. **Main** : `main.py`

## 💡 Conseils

- Utilisez un environnement virtuel pour isoler les dépendances
- Gardez vos CSV dans un dossier séparé si vous avez beaucoup de données
- Le dossier `resultats/` sera créé automatiquement lors de la première exécution
- Tous les graphiques sont en haute résolution (300 DPI)

## 🚀 Prêt !

Une fois tout installé :
```bash
python main.py
```

L'application va :
1. Charger et nettoyer vos données
2. Effectuer toutes les régressions
3. Générer tous les graphiques
4. Créer un rapport complet
5. Tout sauvegarder dans `resultats/`

Durée estimée : 10-30 secondes selon la taille de vos données.