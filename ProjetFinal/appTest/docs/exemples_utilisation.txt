# Exemples d'Utilisation Avanc√©e

## üìä Utiliser les modules individuellement

Vous pouvez utiliser chaque module s√©par√©ment pour des analyses personnalis√©es.

### Exemple 1 : Analyse simple d'une activit√©

```python
from donnees.chargementDonnees import chargerDonneesSport
from donnees.nettoyageDonnees import nettoyerDonneesSport, filtrerParActivite
from analyse.regressionLineaire import regressionLineaireSimple
from visualisation.graphiquesRegression import tracerScatterAvecRegression

# Charger et nettoyer
dfSport = chargerDonneesSport('sport_raw.csv')
dfSportClean = nettoyerDonneesSport(dfSport)

# Filtrer pour le v√©lo uniquement
dfVelo = filtrerParActivite(dfSportClean, 'velo')

# R√©gression
x = dfVelo['duree'].values
y = dfVelo['calories'].values
resultats = regressionLineaireSimple(x, y)

# Visualiser
tracerScatterAvecRegression(resultats, 'velo', 'mon_analyse_velo.png')

print(f"Pente : {resultats['pente']:.2f} calories/min")
print(f"R¬≤ : {resultats['r2']:.3f}")
```

### Exemple 2 : Calculer des statistiques descriptives

```python
from donnees.chargementDonnees import chargerDonneesTravail
from donnees.nettoyageDonnees import nettoyerDonneesTravail
from analyse.statistiques import calculerStatistiquesDescriptives, afficherStatistiques

# Charger donn√©es
dfTravail = chargerDonneesTravail('travail_raw.csv')
dfTravailClean = nettoyerDonneesTravail(dfTravail)

# Statistiques sur le caf√©
statsCafe = calculerStatistiquesDescriptives(
    dfTravailClean['tasses_cafe'].values,
    'Consommation de caf√©'
)
afficherStatistiques(statsCafe)

# Statistiques sur la productivit√©
statsProductivite = calculerStatistiquesDescriptives(
    dfTravailClean['productivite'].values,
    'Productivit√©'
)
afficherStatistiques(statsProductivite)
```

### Exemple 3 : Analyse de corr√©lation personnalis√©e

```python
from donnees.chargementDonnees import chargerDonneesSport, chargerDonneesTravail
from donnees.nettoyageDonnees import nettoyerDonneesSport, nettoyerDonneesTravail, fusionnerDonnees
from analyse.statistiques import calculerCorrelation

# Charger et fusionner
dfSport = nettoyerDonneesSport(chargerDonneesSport('sport_raw.csv'))
dfTravail = nettoyerDonneesTravail(chargerDonneesTravail('travail_raw.csv'))
dfFusion = fusionnerDonnees(dfSport, dfTravail)

# Corr√©lation personnalis√©e
corr, pValue = calculerCorrelation(
    dfFusion['duree_sport'].values,
    dfFusion['tasses_cafe'].values
)

print(f"Corr√©lation dur√©e sport - caf√© : {corr:.3f}")
print(f"P-value : {pValue:.4f}")
print(f"Significatif : {'Oui' if pValue < 0.05 else 'Non'}")
```

### Exemple 4 : Cr√©er un graphique personnalis√©

```python
import matplotlib.pyplot as plt
import numpy as np
from visualisation.utilitairesGraphiques import configurerStyle, sauvegarderGraphique, obtenirCouleur

# Configuration
configurerStyle()

# Donn√©es exemple
activites = ['course', 'velo', 'natation']
moyennes_calories = [590, 450, 480]

# Cr√©er graphique
fig, ax = plt.subplots(figsize=(10, 6))

couleurs = [obtenirCouleur(act) for act in activites]
bars = ax.bar(activites, moyennes_calories, color=couleurs, alpha=0.7, edgecolor='black')

# Ajouter valeurs
for bar, val in zip(bars, moyennes_calories):
    height = bar.get_height()
    ax.text(bar.get_x() + bar.get_width()/2., height,
            f'{val:.0f}',
            ha='center', va='bottom', fontweight='bold')

ax.set_xlabel('Activit√©', fontweight='bold')
ax.set_ylabel('Calories moyennes/heure', fontweight='bold')
ax.set_title('D√©pense √©nerg√©tique moyenne par activit√©', fontweight='bold', pad=15)
ax.grid(True, alpha=0.3, axis='y')

plt.tight_layout()
sauvegarderGraphique('comparaison_personnalisee.png')
plt.show()
```

### Exemple 5 : R√©gression multivari√©e personnalis√©e

```python
import numpy as np
from donnees.chargementDonnees import chargerDonneesSport
from donnees.nettoyageDonnees import nettoyerDonneesSport, filtrerParActivite
from analyse.regressionLineaire import regressionLineaireMultiple

# Charger donn√©es
dfSport = nettoyerDonneesSport(chargerDonneesSport('sport_raw.csv'))
dfCourse = filtrerParActivite(dfSport, 'course')

# Pr√©parer variables ind√©pendantes (dur√©e, poids, autre facteur si disponible)
X = np.column_stack([
    dfCourse['duree'].values,
    dfCourse['poids_kg'].values
])

y = dfCourse['calories'].values

# R√©gression
resultats = regressionLineaireMultiple(X, y)

print("Coefficients de la r√©gression multivari√©e :")
print(f"  Dur√©e : {resultats['coefficients'][0]:.3f} cal/min")
print(f"  Poids : {resultats['coefficients'][1]:.3f} cal/kg")
print(f"  Intercept : {resultats['intercept']:.3f}")
print(f"  R¬≤ : {resultats['r2']:.3f}")
```

## üîß Modifier les param√®tres

### Changer les seuils d'analyse

```python
from analyse.correlations import analyserSportIntenseCafe

# Utiliser un seuil personnalis√© (par d√©faut 60 min)
resultats = analyserSportIntenseCafe(dfFusion, seuilIntense=45)

# ou pour les individus actifs
from analyse.correlations import analyserActifProductif
resultats = analyserActifProductif(dfFusion, seuilActif=20)
```

### Personnaliser les couleurs

Modifiez `config/constantes.py` :

```python
COULEURS_ACTIVITES = {
    'course': '#FF0000',      # Rouge vif
    'velo': '#00FF00',        # Vert vif
    'natation': '#0000FF'     # Bleu vif
}
```

### Changer la r√©solution des images

Dans `config/constantes.py` :

```python
DPI_SAUVEGARDE = 150  # Pour des fichiers plus l√©gers (d√©faut: 300)
# ou
DPI_SAUVEGARDE = 600  # Pour une qualit√© sup√©rieure
```

## üìà Analyses suppl√©mentaires

### Analyse par individu

```python
# Analyser un individu sp√©cifique
dfIndividu = dfFusion[dfFusion['individu_id'] == 1]

# Tracer son √©volution temporelle
import matplotlib.pyplot as plt

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))

ax1.plot(dfIndividu['date'], dfIndividu['tasses_cafe'], 'o-', label='Caf√©')
ax1.set_ylabel('Tasses de caf√©')
ax1.legend()
ax1.grid(True, alpha=0.3)

ax2.plot(dfIndividu['date'], dfIndividu['productivite'], 'o-', color='green', label='Productivit√©')
ax2.set_ylabel('Productivit√©')
ax2.set_xlabel('Date')
ax2.legend()
ax2.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('resultats/evolution_individu_1.png', dpi=300)
```

### Matrice de corr√©lation compl√®te

```python
from analyse.statistiques import creerMatriceCorrelation
import matplotlib.pyplot as plt
import numpy as np

# Colonnes √† analyser
colonnes = ['tasses_cafe', 'heures_travail', 'productivite', 'duree_sport', 'calories_sport']

# Cr√©er matrice
matrice = creerMatriceCorrelation(dfFusion, colonnes)

# Visualiser
fig, ax = plt.subplots(figsize=(10, 8))
im = ax.imshow(matrice, cmap='coolwarm', vmin=-1, vmax=1)

# Annotations
for i in range(len(colonnes)):
    for j in range(len(colonnes)):
        text = ax.text(j, i, f'{matrice.iloc[i, j]:.2f}',
                      ha="center", va="center", color="black", fontweight='bold')

ax.set_xticks(np.arange(len(colonnes)))
ax.set_yticks(np.arange(len(colonnes)))
ax.set_xticklabels(colonnes, rotation=45, ha='right')
ax.set_yticklabels(colonnes)
ax.set_title('Matrice de corr√©lation', fontweight='bold', pad=15)

plt.colorbar(im, ax=ax, label='Coefficient de corr√©lation')
plt.tight_layout()
plt.savefig('resultats/matrice_correlation.png', dpi=300)
```

### Analyse temporelle (tendances)

```python
# Tendance de la consommation de caf√© au fil du temps
dfTravail['mois'] = dfTravail['date'].dt.to_period('M')
tendance = dfTravail.groupby('mois')['tasses_cafe'].mean()

plt.figure(figsize=(12, 6))
plt.plot(tendance.index.to_timestamp(), tendance.values, 'o-', linewidth=2)
plt.xlabel('Mois', fontweight='bold')
plt.ylabel('Tasses de caf√© (moyenne)', fontweight='bold')
plt.title('√âvolution de la consommation de caf√©', fontweight='bold', pad=15)
plt.grid(True, alpha=0.3)
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('resultats/tendance_cafe.png', dpi=300)
```

## üéì Conseils pour analyses avanc√©es

1. **Toujours nettoyer les donn√©es** avant toute analyse
2. **V√©rifier les valeurs manquantes** avec `df.isnull().sum()`
3. **Inspecter les distributions** avec des histogrammes
4. **Tester la normalit√©** des r√©sidus avec Q-Q plots
5. **Valider les hypoth√®ses** de r√©gression (lin√©arit√©, homosc√©dasticit√©)
6. **Interpr√©ter les p-values** : < 0.05 = significatif
7. **Consid√©rer le R¬≤** : > 0.7 = bon mod√®le

## üí° Bonnes pratiques

- Sauvegarder les r√©sultats interm√©diaires
- Documenter vos modifications
- Cr√©er des copies des donn√©es avant transformation
- Utiliser des noms de variables explicites
- Commenter le code pour faciliter la maintenance